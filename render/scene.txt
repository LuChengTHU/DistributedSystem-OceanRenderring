background			#设置背景
	color= 0.1 0.1 0.1		//背景颜色					[缺省值(0,0,0)]
end				#结束设置背景

camera				#设置摄像机信息
	algorithm= RT			//使用的算法（RC/RT/PM/PPM/SPPM）			[缺省值PPM]
	O= 0 5 0.7			//感光点的位置					[*]
	N= 0 1 0.1			//摄像机的朝向					[*]
	image_H= 300			//bmp图像的象素高				[缺省值420]
	image_W= 600			//bmp图像的象素宽				[缺省值420]
	lens_H= 0.6			//摄像机镜头的高（与镜头到感光点距离之比）	[缺省值0.88]
	lens_W= 1.0			//摄像机镜头的宽				[缺省值0.88]
	shade_quality= 4		//计算面积光源光照的质量			[缺省值4]
	drefl_quality= 4		//计算镜面漫反射的质量				[缺省值20]
	max_photons= 5000000		//光子图可容纳光子数				[缺省值500000（PM时推荐值为1e7）]
	emit_photons= 20000000		//总发射光子数					[缺省值100000（PM时推荐值为1e7）]
	sample_photons= 500		//采样时所需光子数				[缺省值10（PM时推荐值为500）]
	sample_dist= 0.1		//采样时最大半径					[缺省值0.1]
end

light area			#设置一个矩形光源
	O= 0 0 5			//矩形光源的中心点				[*]
	Dx= 0 3 3			//矩形光源的x半轴				[*]
	Dy= 3 0 0			//矩形光源的y半轴				[*]
	color= 200 200 200			//光源的色光					[*]
end

primitive polyhedron
	O= -5 4 0
	size= 0.03 0.03 0.03
	angles= 0 0 0
	mesh= ocean.obj
	diff= 0.1
	color= 10 10 10
	absor= 0.5 0.5 0.5
	rindex= 1.34
end

primitive sphere		#设置一个球（一个透明的玻璃球）
	O= 0 8 1
	R= 0.2
	refr= 1
	rindex= 1.7
	absor= 0 1 0
end

primitive plane
	N= 0 0 1			//平面的法向量（正方向）				[*]
	R= -0.5				//原点到平面的距离				[*]
	color= 0 0.2 0.3
	diff= 1
	refl= 1
	refr= 0
	drefl= 0.2
	Dx= 8 0 0			//平面的x轴，其长度有意义：其纹理在场景中的长	[*有纹理时必须]
	Dy= 0 8 0
end


primitive sphere
	O= 0 0 1.5			//平面的法向量（正方向）				[*]
	R= 50				//原点到平面的距离				[*]
	color= 10 10 10
	diff= 0.6
	texture= sky.bmp
end